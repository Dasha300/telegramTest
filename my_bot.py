from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from classes.DataBase import DataBase
from main import main
from yaml import load as yaml_load, SafeLoader
from munch import DefaultMunch


def get_conf() -> DefaultMunch:
    with open(f'config.yaml', 'r') as settings:
        configuration = DefaultMunch.fromDict(yaml_load(settings, SafeLoader))
    return configuration


config = get_conf()
BOT_TOKEN = config.token

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
db = DataBase(config.db_name)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await db.create_database()
    await main(db, "https://htmlacademy.ru/blog/html-tags/p")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–∞—Ä—Å–∏—Ç —Å–∞–π—Ç—ã –∏ –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ!")


@dp.message_handler(commands=['latest'])
async def latest(message: types.Message):
    latest_articles = await db.return_latest()
    latest_dict = dict(latest_articles)
    text = ''
    for key in latest_dict:
        text += f"–í —Ç–∞–±–ª–∏—Ü–µ {key} –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è" + latest_dict[key]
    await message.answer(text)


@dp.message_handler(commands=['search'])
async def search(message: types.Message):
    try:
        search_query = " ".join(message.text.split(' ')[1:])  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        found_articles = await db.return_user_request(search_query)
        found_articles_dict = dict(found_articles)
        if found_articles_dict:
            text = f"–ù–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É {search_query}\n"
            for key in found_articles_dict:
                text += f"- {key} \n {found_articles_dict[key]} \n"
            await message.answer(text)
        else:
            await message.answer(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except IndexError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /search [—Å—Ç—Ä–æ–∫–∞ –ø–æ–∏—Å–∫–∞]")


@dp.message_handler(commands=['insert'])
async def insert(message: types.Message):
    try:
        link = message.text.split(' ', 2)[1]  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å—é
        await main(db, link)
        await message.reply(f"–°—Ç–∞—Ç—å—è '{link}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except IndexError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /insert [—Å—Å—ã–ª–∫–∞]")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
